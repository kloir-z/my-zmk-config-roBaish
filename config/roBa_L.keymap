#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define MOUSE 4
#define SCROLL 5
#define NUM 6

&sk {
    release-after-ms = <1000>;
    quick-release;
};

/ {
    combos {
        compatible = "zmk,combos";

        as_as_shift {
            bindings = <&kp LEFT_SHIFT>;
            key-positions = <10 11>;
            timeout-ms = <30>;
        };

        qw_as_esc_lang2 {
            bindings = <&esc_lang2>;
            key-positions = <0 1>;
        };

        op_as_bs {
            bindings = <&kp BACKSPACE>;
            key-positions = <8 9>;
            timeout-ms = <40>;
        };

        pl_as_del {
            bindings = <&kp DELETE>;
            key-positions = <9 20>;
        };

        lmin_as_shift {
            bindings = <&kp LEFT_SHIFT>;
            key-positions = <20 21>;
        };

        uo_as_lbrac {
            bindings = <&kp_exit_AML RIGHT_BRACKET>;
            key-positions = <6 8>;
            timeout-ms = <20>;
        };

        ip_as_rbrac {
            bindings = <&kp_exit_AML BACKSLASH>;
            key-positions = <7 9>;
            timeout-ms = <20>;
        };

        jl_as_lparen {
            bindings = <&kp_exit_AML ASTERISK>;
            key-positions = <18 20>;
        };

        kmin_as_rparen {
            bindings = <&kp_exit_AML LEFT_PARENTHESIS>;
            key-positions = <19 21>;
        };

        mdot_as_lbrace {
            bindings = <&kp_exit_AML RIGHT_BRACE>;
            key-positions = <30 32>;
        };

        comslash_as_rbrace {
            bindings = <&kp_exit_AML PIPE>;
            key-positions = <31 33>;
        };

        up_as_brackets {
            bindings = <&brackets>;
            key-positions = <6 9>;
            timeout-ms = <20>;
        };

        jmin_as_parentheses  {
            bindings = <&parentheses >;
            key-positions = <18 21>;
        };

        df_as_muhenkan {
            bindings = <&muhenkan_exit_AML>;
            key-positions = <13 12>;
        };

        jk_as_henkan {
            bindings = <&henkan_exit_AML>;
            key-positions = <19 18>;
        };

        sd_as_tab {
            bindings = <&kp TAB>;
            key-positions = <11 12>;
        };

        kl_as_enter {
            bindings = <&kp ENTER>;
            key-positions = <20 19>;
        };

        qwe_as_alt_f4 {
            bindings = <&kp LA(F4)>;
            key-positions = <0 2 1>;
        };

        we_as_capsword {
            bindings = <&caps_word>;
            key-positions = <1 2>;
            timeout-ms = <20>;
        };

        io_as_capsword {
            bindings = <&caps_word>;
            key-positions = <7 8>;
            timeout-ms = <20>;
        };

        qwb_as_mo6 {
            bindings = <&mo 6>;
            key-positions = <0 1 26>;
        };

        yunm_as_bootloader {
            bindings = <&bootloader>;
            key-positions = <5 6 29 30>;
        };

        l_center_combo_as_mb2 {
            bindings = <&mkp MB2>;
            key-positions = <15 27>;
        };

        kdot_as_sk_shift {
            bindings = <&sk LEFT_SHIFT>;
            key-positions = <19 32>;
            timeout-ms = <20>;
            require-prior-idle-ms = <100>;
        };

        xd_as_sk_shift {
            bindings = <&sk LEFT_SHIFT>;
            key-positions = <12 23>;
            timeout-ms = <20>;
            require-prior-idle-ms = <100>;
        };

        space_enter {
            bindings = <&kp ENTER>;
            key-positions = <38 19 20>;
        };
    };

    macros {
        parentheses: parentheses  {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp ASTRK &kp LEFT_PARENTHESIS &kp_exit_AML LEFT>;
            label = "PARENTHESES";
        };

        brackets: brackets {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RIGHT_BRACKET &kp BACKSLASH &kp_exit_AML LEFT>;
            label = "BRACKETS";
        };

        esc_lang2: esc_lang2 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp ESCAPE &kp LANGUAGE_2>;
            label = "ESC_LANG2";
        };

        space_enter: space_enter {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp SPACE &kp ENTER>;
            label = "SPACE_ENTER";
        };

        muhenkan_exit_AML: muhenkan_exit_AML {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp_exit_AML LANGUAGE_2>;
            label = "MUHENKAN_EXIT_AML";
        };

        henkan_exit_AML: henkan_exit_AML {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp_exit_AML LANGUAGE_1>;
            label = "HENKAN_EXIT_AML";
        };

        exit_AML: exit_AML {
            compatible = "zmk,behavior-macro";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <0>;
            bindings = <&tog_off MOUSE>;
            label = "exit_AML";
        };

        kp_exit_AML: kp_exit_AML {
            compatible = "zmk,behavior-macro-one-param";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <1>;
            bindings = <&macro_param_1to1 &kp MACRO_PLACEHOLDER &exit_AML>;
            label = "KP_exit_AML";
        };

        mod_exit_AML: mod_exit_AML {
            compatible = "zmk,behavior-macro-one-param";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <1>;
            bindings =
                <&macro_press>,
                <&macro_param_1to1 &kp MACRO_PLACEHOLDER>,
                <&macro_tap>,
                <&exit_AML>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "MOD_exit_AML";
        };

        mo_exit_AML: mo_exit_AML {
            compatible = "zmk,behavior-macro-one-param";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <1>;
            bindings =
                <&macro_press>,
                <&macro_param_1to1 &mo MACRO_PLACEHOLDER>,
                <&macro_tap>,
                <&exit_AML>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&macro_param_1to1 &mo MACRO_PLACEHOLDER>,
                <&macro_tap>;
            label = "MO_exit_AML";
        };
    };

    behaviors {
        tog_off: toggle_layer_off {
            compatible = "zmk,behavior-toggle-layer";
            #binding-cells = <1>;
            display-name = "Toggle Layer Off";
            toggle-mode = "off";
        };

        lt_exit_AML: lt_exit_AML {
            compatible = "zmk,behavior-hold-tap";
            label = "LT_exit_AML";
            bindings = <&mo_exit_AML>, <&kp_exit_AML>;
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            flavor = "balanced";
        };

        lt_exit_AML_on_hold: lt_exit_AML_on_hold {
            compatible = "zmk,behavior-hold-tap";
            label = "LT_exit_AML_ON_HOLD";
            bindings = <&mo_exit_AML>, <&kp>;
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            flavor = "balanced";
        };

        mt_exit_AML: mt_exit_AML {
            compatible = "zmk,behavior-hold-tap";
            label = "MT_exit_AML";
            bindings = <&mod_exit_AML>, <&kp_exit_AML>;
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
            quick-tap-ms = <200>;
        };

        mt_exit_AML_on_tap: mt_exit_AML_on_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "MT_exit_AML_ON_TAP";
            bindings = <&kp>, <&kp_exit_AML>;
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
            quick-tap-ms = <200>;
        };
    };

    keymap {
        compatible = "zmk,keymap";
        default_layer {
            bindings = <
&kp Q      &kp W         &kp E  &kp R         &kp T                               &kp Y  &kp U  &kp I      &kp O    &kp P
&kp A      &kp S         &kp D  &kp F         &kp G      &mkp MB1   &kp PAGE_UP   &kp H  &kp J  &kp K      &kp L    &kp MINUS
&kp Z      &kp X         &kp C  &kp V         &kp B      &mo 5      &kp PAGE_DOWN &kp N  &kp M  &kp COMMA  &kp DOT  &kp SLASH
&kp LCTRL  &kp LEFT_WIN  &mo 3  &kp LEFT_ALT  &kp SPACE  &mo 2      &mo 2         &mo 1                             &esc_lang2
            >;
        };

        Sym_Num {
            bindings = <
&kp EXCLAMATION  &kp AT        &kp HASH      &kp DOLLAR    &kp PERCENT                      &kp CARET  &kp AMPERSAND      &kp UNDER       &kp EQUAL         &kp 0x89
&kp NUMBER_1     &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4  &kp NUMBER_5 &trans      &trans  &kp COLON  &kp PLUS           &kp LS(0x89)    &kp LEFT_BRACKET  &kp SINGLE_QUOTE
&kp NUMBER_6     &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &kp NUMBER_0 &trans      &trans  &none      &kp DOUBLE_QUOTES  &kp LEFT_BRACE  &kp LS(0x87)      &kp SEMICOLON
&trans           &trans        &trans        &trans        &trans       &trans      &trans  &trans                                                          &trans
            >;
        };

        Func_Navi {
            bindings = <
&kp F1        &kp F2        &kp F3        &kp F4        &kp F5                          &kp LC(W)       &kp LA(LEFT)    &kp LA(RIGHT)  &kp LC(PAGE_UP)  &kp LC(PAGE_DOWN)
&kp F6        &kp F7        &kp F8        &kp F9        &kp F10     &trans      &trans  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp UP_ARROW   &kp RIGHT_ARROW  &kp PAGE_UP
&kp F11       &kp F12       &none         &none         &none       &trans      &trans  &kp HOME        &trans          &none           &none           &kp PAGE_DOWN
&trans        &trans        &trans        &trans        &trans      &trans      &trans  &trans                                                          &trans
            >;
        };

        Other {
            bindings = <
&kp C_MUTE  &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &none            &none                       &none    &none   &none    &none    &none 
&none       &none              &none            &kp PRINTSCREEN  &none   &trans      &trans  &none    &none   &none    &none    &none 
&none       &none              &none            &none            &none   &trans      &trans  &none    &none   &none    &none    &none 
&trans      &trans             &trans           &trans           &trans  &trans      &trans  &trans                            &trans
            >;
        };

        MOUSE {
            bindings = <
&kp_exit_AML Q      &kp_exit_AML W         &kp_exit_AML E  &kp_exit_AML R         &kp_exit_AML T                                        &kp_exit_AML Y  &kp_exit_AML U    &mkp MB1            &mo 5             &mkp MB2
&kp_exit_AML A      &kp_exit_AML S         &kp_exit_AML D  &kp_exit_AML F         &kp_exit_AML G      &mkp MB1        &kp PAGE_UP       &kp_exit_AML H  &kp_exit_AML J    &mkp MB1            &kp_exit_AML L    &kp_exit_AML MINUS
&kp_exit_AML Z      &kp_exit_AML X         &kp_exit_AML C  &kp_exit_AML V         &kp_exit_AML B      &mo_exit_AML 5  &kp PAGE_DOWN     &kp_exit_AML N  &kp_exit_AML M    &kp_exit_AML COMMA  &kp_exit_AML DOT  &kp_exit_AML SLASH
&kp LCTRL           &kp LEFT_WIN           &mo_exit_AML 3  &kp LEFT_ALT           &kp_exit_AML SPACE  &mo_exit_AML 2  &mo_exit_AML 2    &mo_exit_AML 1                                                          &esc_lang2
            >;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;
        };

        Bluetooth {
            bindings = <
&none  &none         &none         &none         &none                          &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&none  &none         &none         &none         &none  &none      &none        &none         &none         &none         &none         &none
&none  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &none  &none      &bootloader  &none         &none         &none         &none         &bt BT_CLR
&none  &none         &none         &none         &none  &none      &none        &none                                                   &bt BT_CLR_ALL
            >;
        };
    };
};
