#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

// OS設定を日本語キーボードのまま使用するための変換定義
#define JP_DQUOTE       AT                // "
#define JP_AMPERSAND    CARET             // &
#define JP_QUOTE        AMPERSAND         // '
#define JP_EQUAL        UNDER             // =
#define JP_CARET        EQUAL             // ^
#define JP_YEN          0x89              // ¥
#define JP_PLUS         COLON             // +
#define JP_TILDE        PLUS              // ~
#define JP_PIPE         LS(0x89)          // |
#define JP_AT           LEFT_BRACKET      // @
#define JP_COLON        SINGLE_QUOTE      // :
#define JP_ASTERISK     DOUBLE_QUOTES     // *
#define JP_BACKQUOTE    LEFT_BRACE        // `
#define JP_UNDERSCORE   LS(0x87)          // _
#define JP_LBRACKET     RIGHT_BRACKET     // [
#define JP_RBRACKET     BACKSLASH         // ]
#define JP_LPAREN       ASTERISK          // (
#define JP_RPAREN       LEFT_PARENTHESIS  // )
#define JP_LBRACE       RIGHT_BRACE       // {
#define JP_RBRACE       PIPE              // }
#define JP_KANA         LANGUAGE_1        // かな
#define JP_EISU         LANGUAGE_2        // 英数
#define JP_HANZEN       GRAVE             // 半角/全角
//

#define MOUSE 4
#define SCROLL 5

&sk {
    release-after-ms = <1000>;
    quick-release;
};

&mt { 
    flavor = "tap-preferred"; 
    tapping-term-ms = <200>;
};

/ {
    combos {
        compatible = "zmk,combos";

        qw_as_esc_eisu {
            bindings = <&esc_eisu>;
            key-positions = <0 1>;
            timeout-ms = <25>;
        };

        we_as_ctrl_alt_tab {
            bindings = <&kp LA(LC(TAB))>;
            key-positions = <1 2>;
            timeout-ms = <25>;
        };

        op_as_bs {
            bindings = <&kp BACKSPACE>;
            key-positions = <8 9>;
            timeout-ms = <25>;
        };

        pl_as_del {
            bindings = <&kp DELETE>;
            key-positions = <9 20>;
            timeout-ms = <25>;
        };

        uo_as_lbrac {
            bindings = <&kp_exit_AML JP_LBRACKET>;
            key-positions = <6 8>;
            timeout-ms = <25>;
        };

        ip_as_rbrac {
            bindings = <&kp_exit_AML JP_RBRACKET>;
            key-positions = <7 9>;
            timeout-ms = <25>;
        };

        jl_as_lparen {
            bindings = <&kp_exit_AML JP_LPAREN>;
            key-positions = <18 20>;
            timeout-ms = <25>;
        };

        kmin_as_rparen {
            bindings = <&kp_exit_AML JP_RPAREN>;
            key-positions = <19 21>;
            timeout-ms = <25>;
        };

        mdot_as_lbrace {
            bindings = <&kp_exit_AML JP_LBRACE>;
            key-positions = <30 32>;
            timeout-ms = <25>;
        };

        comslash_as_rbrace {
            bindings = <&kp_exit_AML JP_RBRACE>;
            key-positions = <31 33>;
            timeout-ms = <25>;
        };

        up_as_brackets {
            bindings = <&brackets>;
            key-positions = <6 9>;
            timeout-ms = <25>;
        };

        jmin_as_parentheses  {
            bindings = <&parentheses>;
            key-positions = <18 21>;
            timeout-ms = <25>;
        };

        df_as_eisu {
            bindings = <&kp_exit_AML JP_EISU>;
            key-positions = <13 12>;
            timeout-ms = <25>;
        };

        jk_as_kana {
            bindings = <&kp_exit_AML JP_KANA>;
            key-positions = <19 18>;
            timeout-ms = <25>;
        };

        as_as_tab {
            bindings = <&alt_tab>;
            key-positions = <10 11>;
            timeout-ms = <25>;
        };

        sd_as_tab {
            bindings = <&kp TAB>;
            key-positions = <11 12>;
            timeout-ms = <25>;
        };

        kl_as_enter {
            bindings = <&kp ENTER>;
            key-positions = <20 19>;
            timeout-ms = <25>;
        };

        wt_as_alt_f4 {
            bindings = <&kp LA(F4)>;
            key-positions = <1 4>;
            timeout-ms = <25>;
        };

        // we_as_capsword {
        //     bindings = <&caps_word_exit_AML>;
        //     key-positions = <1 2>;
        //     timeout-ms = <25>;
        // };

        // io_as_capsword {
        //     bindings = <&caps_word_exit_AML>;
        //     key-positions = <7 8>;
        //     timeout-ms = <25>;
        // };

        // fb_as_mo6 {
        //     bindings = <&mo 6>;
        //     key-positions = <13 26>;
        //     timeout-ms = <25>;
        // };

        yunm_as_bootloader {
            bindings = <&bootloader>;
            key-positions = <5 6 29 30>;
            timeout-ms = <25>;
        };

        l_center_combo_as_mb2 {
            bindings = <&mkp MB2>;
            key-positions = <15 27>;
            timeout-ms = <25>;
        };

        l_ctrl_shift_combo {
            bindings = <&kp LC(LEFT_SHIFT)>;
            key-positions = <22 34>;
            timeout-ms = <25>;
        };

        kdot_as_sk_shift {
            bindings = <&sk_shift_exit_AML>;
            key-positions = <19 32>;
            timeout-ms = <25>;
        };

        xd_as_sk_shift {
            bindings = <&sk_shift_exit_AML>;
            key-positions = <12 23>;
            timeout-ms = <25>;
        };

        zx_as_ctrl_z {
            bindings = <&kp LC(Z)>;
            key-positions = <22 23>;
            timeout-ms = <25>;
        };

        xc_as_ctrl_x {
            bindings = <&kp LC(X)>;
            key-positions = <23 24>;
            timeout-ms = <25>;
        };

        cv_as_ctrl_c {
            bindings = <&kp LC(C)>;
            key-positions = <24 25>;
            timeout-ms = <25>;
        };

        vb_as_ctrl_v {
            bindings = <&kp LC(V)>;
            key-positions = <25 26>;
            timeout-ms = <25>;
        };
    };

    macros {
        parentheses: parentheses {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp JP_LPAREN &kp JP_RPAREN &kp_exit_AML LEFT>;
            label = "PARENTHESES";
        };

        brackets: brackets {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp JP_LBRACKET &kp JP_RBRACKET &kp_exit_AML LEFT>;
            label = "BRACKETS";
        };

        esc_eisu: esc_eisu {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp ESCAPE &kp JP_EISU>;
            label = "ESC_EISU";
        };

        // safe_kana_exit_AML: safe_kana_exit_AML {
        //     compatible = "zmk,behavior-macro";
        //     wait-ms = <5>;
        //     tap-ms = <5>;
        //     #binding-cells = <0>;
        //     bindings = <&kp JP_EISU &kp JP_HANZEN &tog_off MOUSE>;
        //     label = "safe_kana_exit_AML";
        // };

        // caps_word_exit_AML: caps_word_exit_AML {
        //     compatible = "zmk,behavior-macro";
        //     #binding-cells = <0>;
        //     bindings = <&exit_AML &caps_word>;
        //     label = "caps_word_exit_AML";
        // };

        sk_shift_exit_AML: sk_shift_exit_AML {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&exit_AML &sk LEFT_SHIFT>;
            label = "SK_SHIFT_EXIT_AML";
        };

        exit_AML: exit_AML {
            compatible = "zmk,behavior-macro";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <0>;
            bindings = <&tog_off MOUSE>;
            label = "exit_AML";
        };

        kp_exit_AML: kp_exit_AML {
            compatible = "zmk,behavior-macro-one-param";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <1>;
            bindings = <&macro_param_1to1 &kp MACRO_PLACEHOLDER &exit_AML>;
            label = "KP_exit_AML";
        };

        mo_exit_AML: mo_exit_AML {
            compatible = "zmk,behavior-macro-one-param";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <1>;
            bindings =
                <&macro_press>,
                <&macro_param_1to1 &mo MACRO_PLACEHOLDER>,
                <&macro_tap>,
                <&exit_AML>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&macro_param_1to1 &mo MACRO_PLACEHOLDER>,
                <&macro_tap>;
            label = "MO_exit_AML";
        };

        toggle_mute: toggle_mute {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(A) &kp LC(LS(M))>;
            label = "TOGGLE_MUTE";
            wait-ms = <5>;
            tap-ms = <5>;
        };

        alt_tab: alt_tab {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <10>;
            tap-ms = <25>;
            bindings =
                <&macro_press &kp LALT>,
                <&macro_wait_time 25>,
                <&macro_tap &kp TAB>,
                <&macro_release &kp LALT>;
        };

        // Commented out as currently unused, but may be used in the future 
        // mod_exit_AML: mod_exit_AML {
        //     compatible = "zmk,behavior-macro-one-param";
        //     wait-ms = <0>;
        //     tap-ms = <0>;
        //     #binding-cells = <1>;
        //     bindings =
        //         <&macro_press>,
        //         <&macro_param_1to1 &kp MACRO_PLACEHOLDER>,
        //         <&macro_tap>,
        //         <&exit_AML>,
        //         <&macro_pause_for_release>,
        //         <&macro_release>,
        //         <&macro_param_1to1 &kp MACRO_PLACEHOLDER>;
        //     label = "MOD_exit_AML";
        // };
    };

    behaviors {
        tog_off: toggle_layer_off {
            compatible = "zmk,behavior-toggle-layer";
            #binding-cells = <1>;
            display-name = "Toggle Layer Off";
            toggle-mode = "off";
        };

        // Commented out as currently unused, but may be used in the future 
        // lt_exit_AML: lt_exit_AML {
        //     compatible = "zmk,behavior-hold-tap";
        //     label = "LT_exit_AML";
        //     bindings = <&mo_exit_AML>, <&kp_exit_AML>;
        //     #binding-cells = <2>;
        //     tapping-term-ms = <200>;
        //     quick-tap-ms = <200>;
        //     flavor = "balanced";
        // };

        // lt_exit_AML_on_hold: lt_exit_AML_on_hold {
        //     compatible = "zmk,behavior-hold-tap";
        //     label = "LT_exit_AML_ON_HOLD";
        //     bindings = <&mo_exit_AML>, <&kp>;
        //     #binding-cells = <2>;
        //     tapping-term-ms = <200>;
        //     quick-tap-ms = <200>;
        //     flavor = "balanced";
        // };

        // mt_exit_AML: mt_exit_AML {
        //     compatible = "zmk,behavior-hold-tap";
        //     label = "MT_exit_AML";
        //     bindings = <&mod_exit_AML>, <&kp_exit_AML>;
        //     #binding-cells = <2>;
        //     tapping-term-ms = <200>;
        //     flavor = "balanced";
        //     quick-tap-ms = <200>;
        // };

        mt_exit_AML_on_tap: mt_exit_AML_on_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "MT_exit_AML_ON_TAP";
            bindings = <&kp>, <&kp_exit_AML>;
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
            quick-tap-ms = <200>;
        };
    };

    keymap {
        compatible = "zmk,keymap";
        default_layer {
            bindings = <
&kp Q                &kp W         &kp E  &kp R         &kp T                               &kp Y  &kp U  &kp I      &kp O    &kp P
&kp A                &kp S         &kp D  &kp F         &kp G      &mkp MB1   &kp PAGE_UP   &kp H  &kp J  &kp K      &kp L    &kp MINUS
&mt LEFT_SHIFT Z     &kp X         &kp C  &kp V         &kp B      &mo 6      &kp PAGE_DOWN &kp N  &kp M  &kp COMMA  &kp DOT  &kp SLASH
&kp LCTRL            &kp LEFT_WIN  &mo 3  &kp LEFT_ALT  &kp SPACE  &mo 2      &mo 2         &mo 1                             &kp LS(SLASH) 
            >;
        };

        Sym_Num {
            bindings = <
&kp EXCLAMATION    &kp JP_DQUOTE    &kp HASH         &kp DOLLAR      &kp PERCENT                         &kp JP_AMPERSAND  &kp JP_QUOTE       &kp JP_EQUAL     &kp JP_CARET      &kp JP_YEN
&kp NUMBER_1       &kp NUMBER_2     &kp NUMBER_3     &kp NUMBER_4    &kp NUMBER_5    &trans      &trans  &kp JP_PLUS       &kp JP_TILDE       &kp JP_PIPE      &kp JP_AT         &kp JP_COLON
&kp NUMBER_6       &kp NUMBER_7     &kp NUMBER_8     &kp NUMBER_9    &kp NUMBER_0    &trans      &trans  &none             &kp JP_ASTERISK    &kp JP_BACKQUOTE &kp JP_UNDERSCORE &kp SEMICOLON 
&trans             &trans           &trans           &trans          &trans          &trans      &trans  &trans                                                                  &trans
            >;
        };

        Func_Navi {
            bindings = <
&kp F1             &kp F2        &kp F3        &kp F4        &kp F5                          &kp LC(W)       &kp LA(LEFT)    &kp LA(RIGHT)  &kp LC(PAGE_UP)  &kp LC(PAGE_DOWN)
&kp F6             &kp F7        &kp F8        &kp F9        &kp F10     &trans      &trans  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp UP_ARROW   &kp RIGHT_ARROW  &kp PAGE_UP
&mt LEFT_SHIFT F11 &kp F12       &none         &none         &none       &trans      &trans  &kp HOME        &kp LC(END)     &kp LC(HOME)   &kp END          &kp PAGE_DOWN
&trans             &trans        &trans        &trans        &trans      &trans      &trans  &trans                                                          &trans
            >;
        };

        Other {
            bindings = <
&kp C_MUTE  &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &none            &none                       &none    &none     &none     &none     &none 
&none       &none              &toggle_mute     &kp PRINTSCREEN  &none   &trans      &trans  &none    &none     &none     &none     &none 
&none       &none              &none            &none            &none   &trans      &trans  &none    &none     &none     &none     &none 
&trans      &trans             &trans           &trans           &trans  &trans      &trans  &trans                                 &trans
            >;
        };

        MOUSE {
            bindings = <
&kp_exit_AML Q                      &kp_exit_AML W         &kp_exit_AML E  &kp_exit_AML R         &kp_exit_AML T                                        &kp_exit_AML Y  &kp_exit_AML U    &mkp MB1            &mo 5             &mkp MB2
&kp_exit_AML A                      &kp_exit_AML S         &kp_exit_AML D  &kp_exit_AML F         &kp_exit_AML G      &trans          &trans            &kp_exit_AML H  &kp_exit_AML J    &mkp MB1            &mkp MB1          &kp_exit_AML MINUS
&mt_exit_AML_on_tap LEFT_SHIFT Z    &kp_exit_AML X         &kp_exit_AML C  &kp_exit_AML V         &kp_exit_AML B      &trans          &trans            &kp_exit_AML N  &kp_exit_AML M    &kp_exit_AML COMMA  &kp_exit_AML DOT  &kp_exit_AML SLASH
&kp LCTRL                           &kp LEFT_WIN           &mo_exit_AML 3  &kp LEFT_ALT           &kp_exit_AML SPACE  &mo_exit_AML 2  &mo_exit_AML 2    &mo_exit_AML 1                                                          &kp LEFT_SHIFT
            >;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;
        };

        Bluetooth {
            bindings = <
&none  &none         &none         &none         &none                          &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&none  &none         &none         &none         &none  &none      &none        &none         &none         &none         &none         &none
&none  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &none  &none      &bootloader  &none         &none         &none         &none         &bt BT_CLR
&none  &none         &none         &none         &none  &none      &none        &none                                                   &bt BT_CLR_ALL
            >;
        };
    };
};
